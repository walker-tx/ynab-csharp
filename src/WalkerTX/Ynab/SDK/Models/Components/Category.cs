//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace WalkerTX.Ynab.SDK.Models.Components
{
    using Newtonsoft.Json;
    using NodaTime;
    using System;
    using WalkerTX.Ynab.SDK.Models.Components;
    using WalkerTX.Ynab.SDK.Utils;
    
    public class Category
    {

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        [JsonProperty("category_group_id")]
        public string CategoryGroupId { get; set; } = default!;

        [JsonProperty("category_group_name")]
        public string? CategoryGroupName { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Whether or not the category is hidden
        /// </summary>
        [JsonProperty("hidden")]
        public bool Hidden { get; set; } = default!;

        /// <summary>
        /// DEPRECATED: No longer used.  Value will always be null.
        /// </summary>
        [JsonProperty("original_category_group_id")]
        public string? OriginalCategoryGroupId { get; set; } = null;

        [JsonProperty("note")]
        public string? Note { get; set; } = null;

        /// <summary>
        /// Budgeted amount in milliunits format
        /// </summary>
        [JsonProperty("budgeted")]
        public long Budgeted { get; set; } = default!;

        /// <summary>
        /// Activity amount in milliunits format
        /// </summary>
        [JsonProperty("activity")]
        public long Activity { get; set; } = default!;

        /// <summary>
        /// Balance in milliunits format
        /// </summary>
        [JsonProperty("balance")]
        public long Balance { get; set; } = default!;

        /// <summary>
        /// The type of goal, if the category has a goal (TB=&apos;Target Category Balance&apos;, TBD=&apos;Target Category Balance by Date&apos;, MF=&apos;Monthly Funding&apos;, NEED=&apos;Plan Your Spending&apos;)
        /// </summary>
        [JsonProperty("goal_type")]
        public GoalType? GoalType { get; set; } = null;

        /// <summary>
        /// Indicates the monthly rollover behavior for &quot;NEED&quot;-type goals. When &quot;true&quot;, the goal will always ask for the target amount in the new month (&quot;Set Aside&quot;). When &quot;false&quot;, previous month category funding is used (&quot;Refill&quot;). For other goal types, this field will be null.
        /// </summary>
        [JsonProperty("goal_needs_whole_amount")]
        public bool? GoalNeedsWholeAmount { get; set; } = null;

        /// <summary>
        /// A day offset modifier for the goal&apos;s due date. When goal_cadence is 2 (Weekly), this value specifies which day of the week the goal is due (0 = Sunday, 6 = Saturday). Otherwise, this value specifies which day of the month the goal is due (1 = 1st, 31 = 31st, null = Last day of Month).
        /// </summary>
        [JsonProperty("goal_day")]
        public int? GoalDay { get; set; } = null;

        /// <summary>
        /// The goal cadence. Value in range 0-14. There are two subsets of these values which behave differently. For values 0, 1, 2, and 13, the goal&apos;s due date repeats every goal_cadence * goal_cadence_frequency, where 0 = None, 1 = Monthly, 2 = Weekly, and 13 = Yearly. For example, goal_cadence 1 with goal_cadence_frequency 2 means the goal is due every other month. For values 3-12 and 14, goal_cadence_frequency is ignored and the goal&apos;s due date repeats every goal_cadence, where 3 = Every 2 Months, 4 = Every 3 Months, ..., 12 = Every 11 Months, and 14 = Every 2 Years.
        /// </summary>
        [JsonProperty("goal_cadence")]
        public int? GoalCadence { get; set; } = null;

        /// <summary>
        /// The goal cadence frequency. When goal_cadence is 0, 1, 2, or 13, a goal&apos;s due date repeats every goal_cadence * goal_cadence_frequency. For example, goal_cadence 1 with goal_cadence_frequency 2 means the goal is due every other month.  When goal_cadence is 3-12 or 14, goal_cadence_frequency is ignored.
        /// </summary>
        [JsonProperty("goal_cadence_frequency")]
        public int? GoalCadenceFrequency { get; set; } = null;

        /// <summary>
        /// The month a goal was created
        /// </summary>
        [JsonProperty("goal_creation_month")]
        public LocalDate? GoalCreationMonth { get; set; } = null;

        /// <summary>
        /// The goal target amount in milliunits
        /// </summary>
        [JsonProperty("goal_target")]
        public long? GoalTarget { get; set; } = null;

        /// <summary>
        /// The original target month for the goal to be completed.  Only some goal types specify this date.
        /// </summary>
        [JsonProperty("goal_target_month")]
        public LocalDate? GoalTargetMonth { get; set; } = null;

        /// <summary>
        /// The percentage completion of the goal
        /// </summary>
        [JsonProperty("goal_percentage_complete")]
        public int? GoalPercentageComplete { get; set; } = null;

        /// <summary>
        /// The number of months, including the current month, left in the current goal period.
        /// </summary>
        [JsonProperty("goal_months_to_budget")]
        public int? GoalMonthsToBudget { get; set; } = null;

        /// <summary>
        /// The amount of funding still needed in the current month to stay on track towards completing the goal within the current goal period. This amount will generally correspond to the &apos;Underfunded&apos; amount in the web and mobile clients except when viewing a category with a Needed for Spending Goal in a future month.  The web and mobile clients will ignore any funding from a prior goal period when viewing category with a Needed for Spending Goal in a future month.
        /// </summary>
        [JsonProperty("goal_under_funded")]
        public long? GoalUnderFunded { get; set; } = null;

        /// <summary>
        /// The total amount funded towards the goal within the current goal period.
        /// </summary>
        [JsonProperty("goal_overall_funded")]
        public long? GoalOverallFunded { get; set; } = null;

        /// <summary>
        /// The amount of funding still needed to complete the goal within the current goal period.
        /// </summary>
        [JsonProperty("goal_overall_left")]
        public long? GoalOverallLeft { get; set; } = null;

        /// <summary>
        /// The date/time the goal was snoozed.  If the goal is not snoozed, this will be null.
        /// </summary>
        [JsonProperty("goal_snoozed_at")]
        public DateTime? GoalSnoozedAt { get; set; } = null;

        /// <summary>
        /// Whether or not the category has been deleted.  Deleted categories will only be included in delta requests.
        /// </summary>
        [JsonProperty("deleted")]
        public bool Deleted { get; set; } = default!;
    }
}