//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace WalkerTX.Ynab.SDK.Models.Components
{
    using Newtonsoft.Json;
    using System;
    using WalkerTX.Ynab.SDK.Utils;
    
    /// <summary>
    /// If the transaction is a debt/loan account transaction, the type of transaction
    /// </summary>
    public enum HybridTransactionDebtTransactionType
    {
        [JsonProperty("payment")]
        Payment,
        [JsonProperty("refund")]
        Refund,
        [JsonProperty("fee")]
        Fee,
        [JsonProperty("interest")]
        Interest,
        [JsonProperty("escrow")]
        Escrow,
        [JsonProperty("balanceAdjustment")]
        BalanceAdjustment,
        [JsonProperty("credit")]
        Credit,
        [JsonProperty("charge")]
        Charge,
    }

    public static class HybridTransactionDebtTransactionTypeExtension
    {
        public static string Value(this HybridTransactionDebtTransactionType value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static HybridTransactionDebtTransactionType ToEnum(this string value)
        {
            foreach(var field in typeof(HybridTransactionDebtTransactionType).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is HybridTransactionDebtTransactionType)
                    {
                        return (HybridTransactionDebtTransactionType)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum HybridTransactionDebtTransactionType");
        }
    }

}