//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace WalkerTX.Ynab.SDK.Models.Components
{
    using Newtonsoft.Json;
    using NodaTime;
    using WalkerTX.Ynab.SDK.Models.Components;
    using WalkerTX.Ynab.SDK.Utils;
    
    public class HybridTransaction
    {

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        /// <summary>
        /// The transaction date in ISO format (e.g. 2016-12-01)
        /// </summary>
        [JsonProperty("date")]
        public LocalDate Date { get; set; } = default!;

        /// <summary>
        /// The transaction amount in milliunits format
        /// </summary>
        [JsonProperty("amount")]
        public long Amount { get; set; } = default!;

        [JsonProperty("memo")]
        public string? Memo { get; set; } = null;

        /// <summary>
        /// The cleared status of the transaction
        /// </summary>
        [JsonProperty("cleared")]
        public TransactionClearedStatus Cleared { get; set; } = default!;

        /// <summary>
        /// Whether or not the transaction is approved
        /// </summary>
        [JsonProperty("approved")]
        public bool Approved { get; set; } = default!;

        /// <summary>
        /// The transaction flag
        /// </summary>
        [JsonProperty("flag_color")]
        public TransactionFlagColor? FlagColor { get; set; } = null;

        /// <summary>
        /// The customized name of a transaction flag
        /// </summary>
        [JsonProperty("flag_name")]
        public string? FlagName { get; set; } = null;

        [JsonProperty("account_id")]
        public string AccountId { get; set; } = default!;

        [JsonProperty("payee_id")]
        public string? PayeeId { get; set; } = null;

        [JsonProperty("category_id")]
        public string? CategoryId { get; set; } = null;

        /// <summary>
        /// If a transfer transaction, the account to which it transfers
        /// </summary>
        [JsonProperty("transfer_account_id")]
        public string? TransferAccountId { get; set; } = null;

        /// <summary>
        /// If a transfer transaction, the id of transaction on the other side of the transfer
        /// </summary>
        [JsonProperty("transfer_transaction_id")]
        public string? TransferTransactionId { get; set; } = null;

        /// <summary>
        /// If transaction is matched, the id of the matched transaction
        /// </summary>
        [JsonProperty("matched_transaction_id")]
        public string? MatchedTransactionId { get; set; } = null;

        /// <summary>
        /// If the transaction was imported, this field is a unique (by account) import identifier.  If this transaction was imported through File Based Import or Direct Import and not through the API, the import_id will have the format: &apos;YNAB:[milliunit_amount]:[iso_date]:[occurrence]&apos;.  For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of &apos;YNAB:-294230:2015-12-30:1&apos;.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be &apos;YNAB:-294230:2015-12-30:2&apos;.
        /// </summary>
        [JsonProperty("import_id")]
        public string? ImportId { get; set; } = null;

        /// <summary>
        /// If the transaction was imported, the payee name that was used when importing and before applying any payee rename rules
        /// </summary>
        [JsonProperty("import_payee_name")]
        public string? ImportPayeeName { get; set; } = null;

        /// <summary>
        /// If the transaction was imported, the original payee name as it appeared on the statement
        /// </summary>
        [JsonProperty("import_payee_name_original")]
        public string? ImportPayeeNameOriginal { get; set; } = null;

        /// <summary>
        /// If the transaction is a debt/loan account transaction, the type of transaction
        /// </summary>
        [JsonProperty("debt_transaction_type")]
        public HybridTransactionDebtTransactionType? DebtTransactionType { get; set; } = null;

        /// <summary>
        /// Whether or not the transaction has been deleted.  Deleted transactions will only be included in delta requests.
        /// </summary>
        [JsonProperty("deleted")]
        public bool Deleted { get; set; } = default!;

        /// <summary>
        /// Whether the hybrid transaction represents a regular transaction or a subtransaction
        /// </summary>
        [JsonProperty("type")]
        public Models.Components.Type Type { get; set; } = default!;

        /// <summary>
        /// For subtransaction types, this is the id of the parent transaction.  For transaction types, this id will be always be null.
        /// </summary>
        [JsonProperty("parent_transaction_id")]
        public string? ParentTransactionId { get; set; } = null;

        [JsonProperty("account_name")]
        public string AccountName { get; set; } = default!;

        [JsonProperty("payee_name")]
        public string? PayeeName { get; set; } = null;

        /// <summary>
        /// The name of the category.  If a split transaction, this will be &apos;Split&apos;.
        /// </summary>
        [JsonProperty("category_name")]
        public string? CategoryName { get; set; }
    }
}