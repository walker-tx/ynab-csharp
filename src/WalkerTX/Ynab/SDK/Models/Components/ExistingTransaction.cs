//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace WalkerTX.Ynab.SDK.Models.Components
{
    using Newtonsoft.Json;
    using NodaTime;
    using System.Collections.Generic;
    using WalkerTX.Ynab.SDK.Models.Components;
    using WalkerTX.Ynab.SDK.Utils;
    
    public class ExistingTransaction
    {

        [JsonProperty("account_id")]
        public string? AccountId { get; set; }

        /// <summary>
        /// The transaction date in ISO format (e.g. 2016-12-01).  Future dates (scheduled transactions) are not permitted.  Split transaction dates cannot be changed and if a different date is supplied it will be ignored.
        /// </summary>
        [JsonProperty("date")]
        public LocalDate? Date { get; set; }

        /// <summary>
        /// The transaction amount in milliunits format.  Split transaction amounts cannot be changed and if a different amount is supplied it will be ignored.
        /// </summary>
        [JsonProperty("amount")]
        public long? Amount { get; set; }

        /// <summary>
        /// The payee for the transaction.  To create a transfer between two accounts, use the account transfer payee pointing to the target account.  Account transfer payees are specified as `transfer_payee_id` on the account resource.
        /// </summary>
        [JsonProperty("payee_id")]
        public string? PayeeId { get; set; } = null;

        /// <summary>
        /// The payee name.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a matching payee rename rule (only if `import_id` is also specified) or (2) a payee with the same name or (3) creation of a new payee.
        /// </summary>
        [JsonProperty("payee_name")]
        public string? PayeeName { get; set; } = null;

        /// <summary>
        /// The category for the transaction.  To configure a split transaction, you can specify null for `category_id` and provide a `subtransactions` array as part of the transaction object.  If an existing transaction is a split, the `category_id` cannot be changed.  Credit Card Payment categories are not permitted and will be ignored if supplied.
        /// </summary>
        [JsonProperty("category_id")]
        public string? CategoryId { get; set; } = null;

        [JsonProperty("memo")]
        public string? Memo { get; set; } = null;

        /// <summary>
        /// The cleared status of the transaction
        /// </summary>
        [JsonProperty("cleared")]
        public TransactionClearedStatus? Cleared { get; set; }

        /// <summary>
        /// Whether or not the transaction is approved.  If not supplied, transaction will be unapproved by default.
        /// </summary>
        [JsonProperty("approved")]
        public bool? Approved { get; set; }

        /// <summary>
        /// The transaction flag
        /// </summary>
        [JsonProperty("flag_color")]
        public TransactionFlagColor? FlagColor { get; set; } = null;

        /// <summary>
        /// An array of subtransactions to configure a transaction as a split. Updating `subtransactions` on an existing split transaction is not supported.
        /// </summary>
        [JsonProperty("subtransactions")]
        public List<SaveSubTransaction>? Subtransactions { get; set; }
    }
}