//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace WalkerTX.Ynab.SDK
{
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;
    using WalkerTX.Ynab.SDK.Hooks;
    using WalkerTX.Ynab.SDK.Models.Components;
    using WalkerTX.Ynab.SDK.Models.Errors;
    using WalkerTX.Ynab.SDK.Utils;
    using WalkerTX.Ynab.SDK.Utils.Retries;

    /// <summary>
    /// YNAB API Endpoints: Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
    /// </summary>
    public interface IYnab
    {
        public IUser User { get; }
        public IBudgets Budgets { get; }

        /// <summary>
        /// The accounts for a budget
        /// </summary>
        public IAccounts Accounts { get; }

        /// <summary>
        /// The categories for a budget
        /// </summary>
        public ICategories Categories { get; }

        /// <summary>
        /// The payees for a budget
        /// </summary>
        public IPayees Payees { get; }
        public IPayeeLocations PayeeLocations { get; }

        /// <summary>
        /// Each budget contains one or more months, which is where Ready to Assign, Age of Money and category (budgeted / activity / balances) amounts are available.
        /// </summary>
        public IMonths Months { get; }

        /// <summary>
        /// The transactions for a budget
        /// </summary>
        public ITransactions Transactions { get; }
        public IScheduledTransactions ScheduledTransactions { get; }
    }


    /// <summary>
    /// YNAB API Endpoints: Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
    /// </summary>
    public class Ynab: IYnab
    {
        public SDKConfig SDKConfiguration { get; private set; }

        private const string _language = "csharp";
        private const string _sdkVersion = "0.1.0";
        private const string _sdkGenVersion = "2.719.3";
        private const string _openapiDocVersion = "1.77.0";
        public IUser User { get; private set; }
        public IBudgets Budgets { get; private set; }
        public IAccounts Accounts { get; private set; }
        public ICategories Categories { get; private set; }
        public IPayees Payees { get; private set; }
        public IPayeeLocations PayeeLocations { get; private set; }
        public IMonths Months { get; private set; }
        public ITransactions Transactions { get; private set; }
        public IScheduledTransactions ScheduledTransactions { get; private set; }

        public Ynab(SDKConfig config)
        {
            SDKConfiguration = config;
            InitHooks();

            User = new User(SDKConfiguration);

            Budgets = new Budgets(SDKConfiguration);

            Accounts = new Accounts(SDKConfiguration);

            Categories = new Categories(SDKConfiguration);

            Payees = new Payees(SDKConfiguration);

            PayeeLocations = new PayeeLocations(SDKConfiguration);

            Months = new Months(SDKConfiguration);

            Transactions = new Transactions(SDKConfiguration);

            ScheduledTransactions = new ScheduledTransactions(SDKConfiguration);
        }

        public Ynab(string? bearer = null, Func<string>? bearerSource = null, int? serverIndex = null, string? serverUrl = null, Dictionary<string, string>? urlParams = null, IYnabHttpClient? client = null, RetryConfig? retryConfig = null)
        {
            if (serverIndex != null)
            {
                if (serverIndex.Value < 0 || serverIndex.Value >= SDKConfig.ServerList.Length)
                {
                    throw new Exception($"Invalid server index {serverIndex.Value}");
                }
            }

            if (serverUrl != null)
            {
                if (urlParams != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, urlParams);
                }
            }
            Func<WalkerTX.Ynab.SDK.Models.Components.Security>? _securitySource = null;

            if(bearerSource != null)
            {
                _securitySource = () => new WalkerTX.Ynab.SDK.Models.Components.Security() { Bearer = bearerSource() };
            }
            else if(bearer != null)
            {
                _securitySource = () => new WalkerTX.Ynab.SDK.Models.Components.Security() { Bearer = bearer };
            }
            else
            {
                throw new Exception("bearer and bearerSource cannot both be null");
            }

            SDKConfiguration = new SDKConfig(client)
            {
                ServerIndex = serverIndex == null ? 0 : serverIndex.Value,
                ServerUrl = serverUrl == null ? "" : serverUrl,
                SecuritySource = _securitySource,
                RetryConfig = retryConfig
            };

            InitHooks();

            User = new User(SDKConfiguration);

            Budgets = new Budgets(SDKConfiguration);

            Accounts = new Accounts(SDKConfiguration);

            Categories = new Categories(SDKConfiguration);

            Payees = new Payees(SDKConfiguration);

            PayeeLocations = new PayeeLocations(SDKConfiguration);

            Months = new Months(SDKConfiguration);

            Transactions = new Transactions(SDKConfiguration);

            ScheduledTransactions = new ScheduledTransactions(SDKConfiguration);
        }

        private void InitHooks()
        {
            SDKConfiguration = SDKConfiguration.Hooks.SDKInit(SDKConfiguration);
        }

        public class SDKBuilder
        {
            private SDKConfig _sdkConfig = new SDKConfig(client: new YnabHttpClient());

            public SDKBuilder() { }

            public SDKBuilder WithServerIndex(int serverIndex)
            {
                if (serverIndex < 0 || serverIndex >= SDKConfig.ServerList.Length)
                {
                    throw new Exception($"Invalid server index {serverIndex}");
                }
                _sdkConfig.ServerIndex = serverIndex;
                return this;
            }

            public SDKBuilder WithServerUrl(string serverUrl, Dictionary<string, string>? serverVariables = null)
            {
                if (serverVariables != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, serverVariables);
                }
                _sdkConfig.ServerUrl = serverUrl;
                return this;
            }

            public SDKBuilder WithBearerSource(Func<string> bearerSource)
            {
                _sdkConfig.SecuritySource = () => new WalkerTX.Ynab.SDK.Models.Components.Security() { Bearer = bearerSource() };
                return this;
            }

            public SDKBuilder WithBearer(string bearer)
            {
                _sdkConfig.SecuritySource = () => new WalkerTX.Ynab.SDK.Models.Components.Security() { Bearer = bearer };
                return this;
            }

            public SDKBuilder WithClient(IYnabHttpClient client)
            {
                _sdkConfig.Client = client;
                return this;
            }

            public SDKBuilder WithRetryConfig(RetryConfig retryConfig)
            {
                _sdkConfig.RetryConfig = retryConfig;
                return this;
            }

            public Ynab Build()
            {
              if (_sdkConfig.SecuritySource == null) {
                  throw new Exception("securitySource cannot be null. One of `Bearer` or `bearerSource` needs to be defined.");
              }
              return new Ynab(_sdkConfig);
            }

        }

        public static SDKBuilder Builder() => new SDKBuilder();
    }
}